rm <- c()
for(i in length(chrXhead):i){
    if(chrXhead[i] %in% chrXhead[{i-1}:1]) rm <- c(rm,i)
}
rm <- c()
for(i in length(chrXhead):1){
    if(chrXhead[i] %in% chrXhead[{i-1}:1]) rm <- c(rm,i)
}
rm
chrXhead[477]
chrXhead
rm
chrXhead[75]
chrX <- chrX[,-rm]
ncol(chrX)
getwd()
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data/Maize282_imputed_AllZea_GBS_Build_July_2012_FINAL")

for(chr in 1:10){
print(chr)

chrXhead <- read.table(paste("Maize282_imputed_AllZea_GBS_Build_July_2012_FINAL_chr",chr,".hmp.txt",sep=""), header=F,stringsAsFactors=F,comment.char="",nrows=1)
chrXhead <- as.character(chrXhead) #convert to vector
chrXhead <- strsplit(chrXhead,split=":") #split at colon
chrXhead <- as.character(data.frame(chrXhead,stringsAsFactors=F)[1,])#pull taxa name (text before first colon)

chrX <- read.table(paste("Maize282_imputed_AllZea_GBS_Build_July_2012_FINAL_chr",chr,".hmp.txt",sep=""),stringsAsFactors=F,comment.char="",skip=1)  # read chr X data, skip header
names(chrX) <- chrXhead

rm <- c()
for(i in length(chrXhead):1){
    if(chrXhead[i] %in% chrXhead[{i-1}:1]) rm <- c(rm,i)
}

chrX <- chrX[,-rm]

write.table(chrX,file=paste("../282_unique_taxa/chr_",chr,".txt",sep=""))

}
fix(chrX)
str(chrX)
chrX$CML321
which(chrX$CML321==chrX$CML320)
str(chrX)
which(chrX$CML321==chrX$CML314)
length(which(chrX$CML321==chrX$CML314))/nrow(chrX)
chrX$CML321[1:30]
chrX$CML321[1:20]
chrX$CML321[1:19]
chrX$CML314[1:19]
chrX$CML314[20:39]
chrX$CML314[20:38]
chrX$CML321[20:38]
chrX$CML321[40:58]
chrX$CML314[40:58]
chrX$CML314[60:88]
chrX$CML314[60:58]
chrX$CML321[60:58]
chrX$CML314[60:78]
chrX$CML321[60:78]
which(chrX$CML321==chrX$CML314)[1:10]
which(chrX$CML321!=chrX$CML314)[1:10]
q()
getwd()
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data")
chrXhighlow <- read.table("highlow_gbs_hapmaps 2/C08JYACXX_2_c1.hmp.txt",header=T,comment.char="",stringsAsFactors=F)
str(chrXhighlow)
chrXames <- read.table("282_unique_taxa/chr1_1.txt",header=T,stringsAsFactors=F,comment.char="")
chrXames <- read.table("282_unique_taxa/chr_1.txt",header=T,stringsAsFactors=F,comment.char="")
str(chrXames)
rownames(chrXhighlow)[1:20]
chrXhighlow$pos[1:20]
chrXames$pos[1:20]
str(chrXames[1:10])
str(chrXhighlow[1:10])
rownames(chrXhighlow)
overlap <- intersect(chrXames$pos,chrXhighlow$pos)
length(overlap)
nrow(chrXames)
nrow(chrXhighlow)
chrXames$pos[1:10]
chrXames <- chrXames[which(chrXames$pos %in% overlap),]
nrow(chrXames)
length(overlap)
chrXhighlow <- chrXhighlow[which(chrXhighlow$pos %in% overlap),]
nrow(chrXhighlow)
for(chr in 1:10){
    print(chr)
chrXhighlow <- read.table(pate("highlow_gbs_hapmaps 2/C08JYACXX_2_c",chr,".hmp.txt",sep=""),header=T,comment.char="",stringsAsFactors=F)

chrXames <- read.table(paste("282_unique_taxa/chr_",chr,".txt",sep=""),header=T,stringsAsFactors=F,comment.char="")

overlap <- intersect(chrXames$pos,chrXhighlow$pos)

chrXhighlow <- chrXhighlow[which(chrXhighlow$pos %in% overlap),]
chrXames <- chrXames[which(chrXames$pos %in% overlap),]

save(chrXames,file=paste("highlow_ames_reduced_snps/chr",chr,"ames.Robj",sep=""))
save(chrXhighlow,file=paste("highlow_ames_reduced_snps/chr",chr,"highlow.Robj",sep=""))


 }

for(chr in 1:10){
    print(chr)
chrXhighlow <- read.table(paste("highlow_gbs_hapmaps 2/C08JYACXX_2_c",chr,".hmp.txt",sep=""),header=T,comment.char="",stringsAsFactors=F)

chrXames <- read.table(paste("282_unique_taxa/chr_",chr,".txt",sep=""),header=T,stringsAsFactors=F,comment.char="")

overlap <- intersect(chrXames$pos,chrXhighlow$pos)

chrXhighlow <- chrXhighlow[which(chrXhighlow$pos %in% overlap),]
chrXames <- chrXames[which(chrXames$pos %in% overlap),]

save(chrXames,file=paste("highlow_ames_reduced_snps/chr",chr,"ames.Robj",sep=""))
save(chrXhighlow,file=paste("highlow_ames_reduced_snps/chr",chr,"highlow.Robj",sep=""))


 }
ls()
q()
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data/highlow_ames_reduced")
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data/highlow_ames_reduced_snps")
install.packages("adegenet")
library(adegenet)
load("chr1ames.Robj")
ls()
load("chr10ames.Robj")
ls()
dim(chrXames)
?df2genind
assign("chr10ames",chrXames)
ls()
dim(chrXames)
dim(chr10ames)
for(i in 1:10){
 print(i)
 load(paste("chr",i,"ames.Robj",sep=""))
 assign(paste("chr",i,"ames",sep=""),chrXames)
}
ls()
x <- c(1,2,3,4)
y <- c(4,3,2,1)
cbind(x,y)
rbind(x,y)
amesData <- rbind(chr1ames,chr2ames,chr3ames,chr4ames,chr5ames,chr6ames,chr7ames,chr8ames,chr9ames,chr10ames)
str(chr1ames)
amesData <- rbind(chr1ames,chr2ames,chr3ames,chr4ames,chr5ames,chr6ames,chr7ames,chr8ames,chr9ames,chr10ames) ###
?df2genind
amesData[whichamesData=="N"] <- NA
amesData[which(amesData=="N")] <- NA
amesData <- rbind(chr1ames,chr2ames,chr3ames,chr4ames,chr5ames,chr6ames,chr7ames,chr8ames,chr9ames,chr10ames) ###
ls()
snpIndex <- sample(nrow(amesData),size=10000)
snpIndex
nrow(amesData)
amesSub <- amesData[snpIndex,]
dim(amesSub)
amesSub[which(amesSub=="N")] <- NA
sub1 <- data.frame(amesSub,stringsAsFactors=F,na.strings="N")
str(amesSub)
str(sub1)
str(amesSub)
amesSub[,15]
levels(as.factor(amesSub[,15]))
summary(as.factor(amesSub[,15]))
q()

library(adegenet)

### Set working directory
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data/highlow_ames_reduced_snps")

### Load data
for(i in 1:10){
 print(i)
 load(paste("chr",i,"ames.Robj",sep=""))
 assign(paste("chr",i,"ames",sep=""),chrXames)
}

amesData <- rbind(chr1ames,chr2ames,chr3ames,chr4ames,chr5ames,chr6ames,chr7ames,chr8ames,chr9ames,chr10ames) ### paste all ames data together

### Pick 10,000 SNPs to use for structure
snpIndex <- sample(nrow(amesData),size=10000)
amesSub <- amesData[snpIndex,]

### Load packages
library(adegenet)

### Set working directory
setwd("/Users/beissinger/Documents/ParallelAdaptation/Data/highlow_ames_reduced_snps")

### Load data
for(i in 1:10){
 print(i)
 load(paste("chr",i,"ames.Robj",sep=""))
 assign(paste("chr",i,"ames",sep=""),chrXames)
}


amesData <- rbind(chr1ames,chr2ames,chr3ames,chr4ames,chr5ames,chr6ames,chr7ames,chr8ames,chr9ames,chr10ames) ### paste all ames data together
snpIndex <- sample(nrow(amesData),size=10000)
amesSub <- amesData[snpIndex,]
str(amesSub)
amesSubMat <- as.matrix(amesSub)
str(amesSubMat)
fix(amesSubMat)
amesSubMat[which(amesSubMat=="N")] <- NA
which(amesSubMat==NA)
fix(amesSubMat)
amesSubMat[which(as.na(amesSubMat)] <- NA
amesSubMat[which(is.na(amesSubMat)] <- NA
amesSubMat[which(is.na(amesSubMat)]
amesSubMat[which(is.na(amesSubMat))]
amesSubMat[which(amesSubMat=="X")] <- NA
amesSubMat[which(amesSubMat=="A")] <- "A/A"
amesSubMat[which(amesSubMat=="C")] <- "C/C"
amesSubMat[which(amesSubMat=="G")] <- "G/G"
amesSubMat[which(amesSubMat=="T")] <- "T/T"
amesSubMat[which(amesSubMat=="K")] <- "G/T"
amesSubMat[which(amesSubMat=="M")] <- "A/C"
amesSubMat[which(amesSubMat=="R")] <- "A/G"
amesSubMat[which(amesSubMat=="S")] <- "C/G"
amesSubMat[which(amesSubMat=="W")] <- "A/T"
amesSubMat[which(amesSubMat=="Y")] <- "C/T"


fix(amesSubMat)
str(amesSubMat)[1:10]
names(amesSubMat)[1:10]
colnames(amesSubMat)[1:10]
colnames(amesSubMat)[1:15]
amesSubMat[,11]
rownames(amesSubMat)[1:10]
snpIndex <- snpIndex[order(snpIndex)]
amesSub <- amesData[snpIndex,]

### Replace hapmap code with nucleotides... 
amesSubMat <- as.matrix(amesSub)
amesSubMat[which(amesSubMat=="N")] <- NA
amesSubMat[which(amesSubMat=="X")] <- NA
amesSubMat[which(amesSubMat=="A")] <- "A/A"
amesSubMat[which(amesSubMat=="C")] <- "C/C"
amesSubMat[which(amesSubMat=="G")] <- "G/G"
amesSubMat[which(amesSubMat=="T")] <- "T/T"
amesSubMat[which(amesSubMat=="K")] <- "G/T"
amesSubMat[which(amesSubMat=="M")] <- "A/C"
amesSubMat[which(amesSubMat=="R")] <- "A/G"
amesSubMat[which(amesSubMat=="S")] <- "C/G"
amesSubMat[which(amesSubMat=="W")] <- "A/T"
amesSubMat[which(amesSubMat=="Y")] <- "C/T"
ames <- data.frame(t(amesSubMat[,11:ncol(amesSubMat)]),stringsAsFactors=F)
str(ames)
rownames(ames)
colnames(ames)
str(amesSubMat)[,1:11]
str(amesSub)[,1:11]
str(amesSub)[1:11]
str(amesSub)
paste(amesSub$chrom,amesSub$pos,sep=".")
paste(amesSub$chrom,amesSub$pos,sep="_")
colnames(ames) <- paste(amesSub$chrom,amesSub$pos,sep="_")
fix(ames)
amesGenind <- df2genind(ames,ploidy=2,sep="/")
?df2genind
amesGenind <- df2genind(ames,ploidy=2,sep="/")
heterotic <- read.table("ames_heterotic.txt",header=T,stringsAsFactors=F,sep="\t")
dir()
heterotic <- read.table("../ames_heterotic.txt",header=T,stringsAsFactors=F,sep="\t")
str(heterotic)
popData <- read.table("../ames_heterotic.txt",header=T,stringsAsFactors=F,sep="\t")
heterotic <- popData[,c("Inbred","Subpopulation")]
heterotic
fix(heterotic)
heterotic <- popData[1:151,c("Inbred","Subpopulation")]
heterotic
rownames(ames)
membership <- merge(rownames(ames),heterotic,by.y=Inbred)
membership <- merge(rownames(ames),heterotic,by.y="Inbred")
membership <- merge(ames,heterotic,by.y="Inbred",by.x=rownames(ames))
individuals <- data.frame(row.names(ames))
str(individuals)
names(individuals) <- "Inbred")
names(individuals) <- "Inbred"
str(individuals)
membership <- merge(individuals,heterotic,by="Inbred")
str(membership)
fix(membership)
membership <- merge(individuals,heterotic,by="Inbred",all.x=T)
str(membership)
fix(membership)
str(heterotic)
individuals <- data.frame(row.names(ames),stringsAsFactors=F)
names(individuals) <- "Inbred"
membership <- merge(individuals,heterotic,by="Inbred",all.x=T)
str(membership)
nrow(membership)
nrow(ames)
ames[1,]
rownames(ames)[1]
individuals[1,]
fix(individuals)
fix(membership)
?merge
membership <- merge(individuals,heterotic,by="Inbred",all.x=T,sort=F)
str(membership)
str(individuals)
str(heterotic)
?membership
?merge
membership <- merge(heterotic,individuals,by="Inbred",all.y=T,sort=F)
str(membership)
rownames(ames)
popData <- read.table("../ames_heterotic.txt",header=T,stringsAsFactors=F,sep="\t")
ames <- data.frame(t(amesSubMat[,11:ncol(amesSubMat)]),stringsAsFactors=F)
popData <- read.table("../ames_heterotic.txt",header=T,stringsAsFactors=F,sep="\t")
heterotic <- popData[1:151,c("Inbred","Subpopulation")]
individuals <- data.frame(row.names(ames),stringsAsFactors=F)
individuals
names(individuals) <- "Inbred"
str(individuals)
membership <- merge(heterotic,individuals,by="Inbred",all.y=T,sort=F)
membership
membership <- merge(heterotic,individuals,by="Inbred",all.y=T)
membership
fix(membership)
?merge
membership <- merge(individuals,heterotic,by="Inbred",all.x=T)
str(membership)
membership <- merge(individuals,heterotic,by="Inbred",all.x=T,sort=T)
str(membership)
membership <- merge(individuals,heterotic,by="Inbred",all.x=T,sort.x=T)
membership
membership <- merge(individuals,heterotic,by="Inbred",all.x=T,sort.y=T)
membership
order(rownames(individuals))
rownamess(individuals)
rownames(individuals)
order(individuals$Inbred)
individuals$Inbred
order(individuals$Inbred)
order(membership$Inbred)
ames <- ames[order(individuals$Inbred),]
individuals[order(individuals$Inbred),]
rownames(ames)
rownames(ames)[1:20]
rownames(membership)[1:20]
membership$Inbred[1:20]
cbind(rownames(ames),membership$Inbred)
?df2genind
membership$subpopulation
str(membership)
rownames(ames)
amesGenind <- df2genind(ames,ploidy=2,sep="/",ind.names=rownames(ames),pop=membership$Subpopulation)
amesMat <- scaleGen(amesGenind,missing="mean")
amesPCA <- dudi.pca(amesMat,cent=F,scale=F,scannf=F,nf=2)
barplot(amesPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
colorplot(amesPCA$li,amesPCA$li,transp=T,cex=2,xlab="PC 1",ylab="PC 2")
title("PCA of Ames Panel /naxes 1 & 2")
abline(v=9,h=0,col="grey")
str(amesPCA)
str(amesGenind)
amesPCA@pop
amesPCA$pop
amesGenind$pop
str(amesGenind)
pca.colors <- vector(0,length=nrow(membership))
pca.colors <- as.vector(0,length=nrow(membership))
pca.colors <- repeat(0,length=nrow(membership))
pca.colors <- repeat(0,nrow(membership))
pca.colors <- rep(0,nrow(membership))
pca.colors
amesPCA$pop.names
amesGenind$pop.names
amesGenind$Pop
amesGenind$pop
pca.colors <- as.numeric(amesGenind$Pop)
pca.colors <- as.numeric(amesGenind$pop)
pca.colors
plot(amesPCA$li,amesPCA$li,transp=T,cex=2,xlab="PC 1",ylab="PC 2")
colorplot(amesPCA$li,amesPCA$li,transp=T,cex=2,xlab="PC 1",ylab="PC 2")
colorplot(amesPCA$li,amesPCA$li,transp=T,cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li,amesPCA$li,cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
PCA$li
amesPCA$li
str(amesPCA$li)
?dudi.pca
plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
points(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2")
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel /naxes 1 & 2")
abline(v=9,h=0,col="grey")
abline(v=0,h=0,col="grey")
amesGenind$Pop.names
amesGenind$pop.names
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)
amesGenind$Pop
amesGenind$pop
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=0:5,pch=19)
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)
merged$subpopulation
str(merged)
str(membership)
membership$Subpopulation
which(mempership$Subpopulation=="sweet")
which(membership$Subpopulation=="sweet")
str(amesMat)
amesPCA <- dudi.pca(amesMat[which(membership$Subpopulation =="ss" | membership$Subpopulation=="nss"),],cent=F,scale=F,scannf=F,nf=2) # calculate principal components
barplot(amesPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2")
amesPCA <- dudi.pca(amesMat,cent=F,scale=F,scannf=F,nf=2) # calculate principal components
barplot(amesPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
pca.colors <- as.numeric(amesGenind$pop)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)
[which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss")
which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss")
membership$Subpopulation[which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss")]
amesSSNSS <- ames[which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss"),]
membershipSSNSS <- membership$Subpopulation[which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss")]
amesSSNSSGenind <- df2genind(amesSSNSS,ploidy=2,sep="/",ind.names=rownames(amesSSNSS),pop=membershipSSNSS$Subpopulation)
membershipSSNSS <- membership[which(membership$Subpopulation=="ss" | membership$Subpopulation=="nss"),]
membershipSSNSS
amesSSNSSGenind <- df2genind(amesSSNSS,ploidy=2,sep="/",ind.names=rownames(amesSSNSS),pop=membershipSSNSS$Subpopulation)
amesGenind$pop.names
amesSSNSSMat <- scaleGen(amesSSNSSGenind,missing="mean")
amesSSNSSPCA <- dudi.pca(amesSSNSSMat,cent=F,scale=F,scannf=F,nf=2) # calculate principal components
barplot(amesSSNSSPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
pca.colors <- as.numeric(amesSSNSSGenind$pop)
pca.colors
plot(amesSSNSSPCA$li[,1],amesSSNSSPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, SS & NSS only, axes 1 & 2")
amesSSNSS$pop.names
amesSSNSSGenind$pop.names
legend("topright","(x,y)",c("NSS","SS"),col=1:2,pch=19)
par(mfrow=c(2,1)
)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)

par(mfrow=c(1,2))
### Plot PCA ###
### Set colors ###
pca.colors <- as.numeric(amesGenind$pop)
#plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)

### Plot PCA ###
### Set colors ###
pca.colors <- as.numeric(amesSSNSSGenind$pop)
#plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesSSNSSPCA$li[,1],amesSSNSSPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, SS & NSS only, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","SS"),col=1:2,pch=19)

barplot(amesSSNSSPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
barplot(amesPCA$eig,main="Ames PCA eigenvalues",col=heat.colors)
barplot(amesPCA$eig[1:25],main="Ames PCA eigenvalues",col=heat.colors)

### Plot PCA ###
### Set colors ###
pca.colors <- as.numeric(amesGenind$pop)
#plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)

### Plot PCA ###
### Set colors ###
pca.colors <- as.numeric(amesGenind$pop)
#plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesPCA$li[,1],amesPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","Mixed","TS","SS","Sweet","Popcorn"),col=1:6,pch=19)

### Plot PCA ###
### Set colors ###
pca.colors <- as.numeric(amesSSNSSGenind$pop)
#plot(amesPCA$li[,1],amesPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",col=pca.colors)
plot(amesSSNSSPCA$li[,1],amesSSNSSPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of Ames Panel, SS & NSS only, axes 1 & 2")
abline(v=0,h=0,col="grey")
legend("topright","(x,y)",c("NSS","SS"),col=1:2,pch=19)

ncol(ames)
ncol(amesData)
nrow(amesData)
### Load highlow data
for(i in 1:10){
 print(i)
 load(paste("chr",i,"highlow.Robj",sep=""))
 assign(paste("chr",i,"highlow",sep=""),chrXames)
}
highlowData <- rbind(chr1highlow,chr2highlow,chr3highlow,chr4highlow,chr5highlow,chr6highlow,chr7highlow,chr8highlow,chr9highlow,chr10highlow) ### paste all ames data together
nrow(highlowData)
nrow(amesData)
str(highlowData)
hist(highlowData$chrom)
hist(amesData$chrom)
dim(chr1highlow)
dim(chr2highlow)
dim(chr3highlow)
### Load highlow data
for(i in 1:10){
 print(i)
 load(paste("chr",i,"highlow.Robj",sep=""))
 assign(paste("chr",i,"highlow",sep=""),chrXhighlow)
}
dim(chr1highlow)
dim(chr2highlow)
dim(chr1ames)
dim(chr2ames)
highlowData <- rbind(chr1highlow,chr2highlow,chr3highlow,chr4highlow,chr5highlow,chr6highlow,chr7highlow,chr8highlow,chr9highlow,chr10highlow) ### paste all ames data together
dim(highlowData)
dim(amesData)
highlowSub <- highlowData[snpIndex,]
fix(highlowSub)
### Replace hapmap code with nucleotides...
highlowSubMat <- as.matrix(highlowSub)
highlowSubMat[which(highlowSubMat=="N")] <- NA
highlowSubMat[which(highlowSubMat=="X")] <- NA
highlowSubMat[which(highlowSubMat=="A")] <- "A/A"
highlowSubMat[which(highlowSubMat=="C")] <- "C/C"
highlowSubMat[which(highlowSubMat=="G")] <- "G/G"
highlowSubMat[which(highlowSubMat=="T")] <- "T/T"
highlowSubMat[which(highlowSubMat=="K")] <- "G/T"
highlowSubMat[which(highlowSubMat=="M")] <- "A/C"
highlowSubMat[which(highlowSubMat=="R")] <- "A/G"
highlowSubMat[which(highlowSubMat=="S")] <- "C/G"
highlowSubMat[which(highlowSubMat=="W")] <- "A/T"
highlowSubMat[which(highlowSubMat=="Y")] <- "C/T"
fix(highlowSubMat)
str(highlowSubMat)
fix(highlowSubMat)
highlow <- data.frame(t(highlowSubMat[,5:ncol(highlowSubMat)]),stringsAsFactors=F)
highlowSub$pos
colnames(highlow) <- highlowSub$pos
highlowGenind <- df2genind(highlow,ploidy=2,sep="/",ind.names=rownames(highlow))
highlowMat <- scaleGen(highlowGenind,missing="mean")
highlowPCA <- dudi.pca(highlowMat,cent=F,scale=F,scannf=F,nf=2) # calculate principal components
barplot(highlowPCA$eig[1:25],main="Ames PCA eigenvalues",col=heat.colors)
plot(highlowPCA$li[,1],highlowPCA$li[,2],cex=2,xlab="PC 1",ylab="PC 2",transp=T)
title("PCA of highlow inds, axes 1 & 2")
abline(v=0,h=0,col="grey")
rownames(highlow)
highlowMembership <- cbind(rownames(highlow),NULL)
highlowMembership
fix(highlowMembership)
highlowMembership
str(highlowMembership)
pca.colors <- as.numeric(highlowMembership[,2])
pca.colors
pca.colors <- as.numeric(as.factor(highlowMembership[,2]))
pca.colors
plot(highlowPCA$li[,1],highlowPCA$li[,2],cex=1,pch=19,xlab="PC 1",ylab="PC 2",col=pca.colors)
title("PCA of highlow inds, axes 1 & 2")
abline(v=0,h=0,col="grey")
as.numeric(as.factor(highlowMembership[,2]))
highlowMembership[,2]
levels(as.factor(highlowMembership[,2]))
legend("topleft","(x,y)",c("Mex High","Mex Low","SA High","SA Low"),col=1:4,pch=19)
allTaxa <- rbind(ames,highlow)
str(ames)
str(highlow)
str(ames)
str(amesMat)
str(highlowMat)
fix(highlowMat)
dim(ames)
dim(highlow)
names(ames)
names(highlow)
colnames(ames)[1:10]
colnames(highlow)[1:10]
colnames(ames) <- amesSub$pos
colnames(ames)
colnames(highlow)[1:10]
colnames(ames)[1:10]
allTaxa <- rbind(ames,highlow)
membership
membership$Subpopulation
highlowMembership[,2]
allsubpops <- c(membership$Subpopulation,highlowMembership[,2])
allGenind <- df2genind(allTaxa,ploidy=2,sep="/",ind.names=rownames(highlow),pop.names=allsubpops)
allGenind <- df2genind(allTaxa,ploidy=2,sep="/",ind.names=rownames(highlow),pop=allsubpops)
length(allsubpops)
nrow(allTaxa)
str(df2genind)
str(allGenind)
amesPCA$c1
str(highlowMat)
fix(highlowMat)
foo <- highlowMat %*% amesPCA$c1[,1]
foo <- amesPCA$c1[,1] %*% highlowMat
length(amesPCA$c1[,1])
length(amesPCA$c1[,2])
length(amesPCA$li[,1])
16612/283
str(amesMat)
fix(amesMat)
fix(highlowMat)
dim(amesMat)
dim(highlowMat)
dim(ames)
allGenind <- rbind(amesGenind,highlowGenind)
allGenind <- cbind(amesGenind,highlowGenind)
str(allGenind)
allMat <- scaleGen(allGenind,missing="mean")
?genind2genind
?genind
dir()
getwd()
setwd("../../")
dir()
save.image("PCA.RObj")
w()
q()
